from PIL import Image, ImageDraw, ImageFont
import os

def generate_meme(image_path, top_text, bottom_text, output_path, font_path=None, font_size=40,
                  text_color=(255, 255, 255), outline_color=None, shadow_color=None, outline_width=0, shadow_offset=(5, 5),
                  resize_width=None, resize_height=None):
    try:
        # Open the image
        img = Image.open(image_path)
    except FileNotFoundError:
        print(f"Error: Image not found at {image_path}")
        return
    except Exception as e:
        print(f"An error occurred: {e}")
        return

    # Resize image if specified
    if resize_width and resize_height:
        img = img.resize((resize_width, resize_height))

    # Load a font
    if font_path:
        try:
            font = ImageFont.truetype(font_path, font_size)
        except Exception as e:
            print(f"Error loading font: {e}")
            font = ImageFont.load_default()
    else:
        font = ImageFont.load_default()

    # Get a drawing context
    draw = ImageDraw.Draw(img)

    # Add top text
    draw_text(draw, top_text, font, text_color, outline_color, shadow_color, outline_width, shadow_offset, img.width, img.height, True)

    # Add bottom text
    draw_text(draw, bottom_text, font, text_color, outline_color, shadow_color, outline_width, shadow_offset, img.width, img.height, False)

    # Save the output image
    img.save(output_path)

def draw_text(draw, text, font, text_color, outline_color, shadow_color, outline_width, shadow_offset, img_width, img_height, top):
    # Calculate text size and position
    text_width, text_height = draw.textsize(text, font=font)
    text_x = (img_width - text_width) // 2
    if top:
        text_y = 10
    else:
        text_y = img_height - text_height - 10

    # Add outline if specified
    if outline_color:
        for dx in range(-outline_width, outline_width + 1):
            for dy in range(-outline_width, outline_width + 1):
                draw.text((text_x + dx, text_y + dy), text, font=font, fill=outline_color)

    # Add shadow if specified
    if shadow_color:
        shadow_x, shadow_y = shadow_offset
        draw.text((text_x + shadow_x, text_y + shadow_y), text, font=font, fill=shadow_color)

    # Add text
    draw.text((text_x, text_y), text, font=font, fill=text_color)

def list_fonts():
    font_list = ImageFont.get_fonts()
    for font in font_list:
        print(font)

if __name__ == "__main__":
    # Example usage
    image_path = "path/to/your/image.jpg"
    top_text = "Top Text"
    bottom_text = "Bottom Text"
    output_path = "output/meme_output.jpg"
    font_path = "path/to/your/font.ttf"  # Set to None for default font

    generate_meme(image_path, top_text, bottom_text, output_path, font_path,
                  text_color=(255, 255, 255), outline_color=(0, 0, 0), shadow_color=(0, 0, 0), outline_width=2,
                  
